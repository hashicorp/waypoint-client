// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpWaypointVariable Variable stores a variable's value, and metadata to allow for precedence
// sorting and source-specific error messaging
//
// swagger:model hashicorp.waypoint.Variable
type HashicorpWaypointVariable struct {

	// bool
	Bool bool `json:"bool,omitempty"`

	// Cli is set if a variable value is set via a -var flag
	Cli interface{} `json:"cli,omitempty"`

	// Dynamic config source plugin
	Dynamic interface{} `json:"dynamic,omitempty"`

	// Env is set if a variable value is set in the local
	// environment via a WP_VAR_*
	Env interface{} `json:"env,omitempty"`

	// File is set if a variable value is set via a -var-file flag
	File *HashicorpWaypointVariableFile `json:"file,omitempty"`

	// final value
	FinalValue *HashicorpWaypointVariableFinalValue `json:"final_value,omitempty"`

	// hcl stores values of any complex type in a raw string format, and
	// converts it to hcl when we evaluate variables. This is used when
	// loading values from a file or from the server/UI.
	Hcl string `json:"hcl,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// num
	Num string `json:"num,omitempty"`

	// sensitive
	Sensitive bool `json:"sensitive,omitempty"`

	// Server is set if the variable value comes from the server.
	// When we add support for workspace variables, we can store the workspace
	// id here.
	Server interface{} `json:"server,omitempty"`

	// str
	Str string `json:"str,omitempty"`

	// VCS is set if git polling is enabled and an
	// *.auto.wpvars.hcl/json file is found in the repo
	Vcs *HashicorpWaypointVariableVCS `json:"vcs,omitempty"`
}

// Validate validates this hashicorp waypoint variable
func (m *HashicorpWaypointVariable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinalValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointVariable) validateFile(formats strfmt.Registry) error {

	if swag.IsZero(m.File) { // not required
		return nil
	}

	if m.File != nil {
		if err := m.File.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointVariable) validateFinalValue(formats strfmt.Registry) error {

	if swag.IsZero(m.FinalValue) { // not required
		return nil
	}

	if m.FinalValue != nil {
		if err := m.FinalValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("final_value")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointVariable) validateVcs(formats strfmt.Registry) error {

	if swag.IsZero(m.Vcs) { // not required
		return nil
	}

	if m.Vcs != nil {
		if err := m.Vcs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcs")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpWaypointVariable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpWaypointVariable) UnmarshalBinary(b []byte) error {
	var res HashicorpWaypointVariable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
