// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpWaypointJobResult hashicorp waypoint job result
//
// swagger:model hashicorp.waypoint.Job.Result
type HashicorpWaypointJobResult struct {

	// auth
	Auth *HashicorpWaypointJobAuthResult `json:"auth,omitempty"`

	// build
	Build *HashicorpWaypointJobBuildResult `json:"build,omitempty"`

	// config sync
	ConfigSync HashicorpWaypointJobConfigSyncResult `json:"config_sync,omitempty"`

	// deploy
	Deploy *HashicorpWaypointJobDeployResult `json:"deploy,omitempty"`

	// docs
	Docs *HashicorpWaypointJobDocsResult `json:"docs,omitempty"`

	// init
	Init HashicorpWaypointJobInitResult `json:"init,omitempty"`

	// pipeline config sync
	PipelineConfigSync *HashicorpWaypointJobPipelineConfigSyncResult `json:"pipeline_config_sync,omitempty"`

	// pipeline step
	PipelineStep *HashicorpWaypointJobPipelineStepResult `json:"pipeline_step,omitempty"`

	// poll
	Poll *HashicorpWaypointJobPollResult `json:"poll,omitempty"`

	// project destroy
	ProjectDestroy *HashicorpWaypointJobProjectDestroyResult `json:"project_destroy,omitempty"`

	// push
	Push *HashicorpWaypointJobPushResult `json:"push,omitempty"`

	// queue project
	QueueProject *HashicorpWaypointJobQueueProjectResult `json:"queue_project,omitempty"`

	// release
	Release *HashicorpWaypointJobReleaseResult `json:"release,omitempty"`

	// start task
	StartTask *HashicorpWaypointJobStartTaskResult `json:"start_task,omitempty"`

	// status report
	StatusReport *HashicorpWaypointJobStatusReportResult `json:"status_report,omitempty"`

	// up
	Up *HashicorpWaypointJobUpResult `json:"up,omitempty"`

	// validate
	Validate HashicorpWaypointJobValidateResult `json:"validate,omitempty"`

	// watch task
	WatchTask *HashicorpWaypointJobWatchTaskResult `json:"watch_task,omitempty"`
}

// Validate validates this hashicorp waypoint job result
func (m *HashicorpWaypointJobResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuild(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipelineConfigSync(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipelineStep(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoll(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectDestroy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePush(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelease(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWatchTask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointJobResult) validateAuth(formats strfmt.Registry) error {

	if swag.IsZero(m.Auth) { // not required
		return nil
	}

	if m.Auth != nil {
		if err := m.Auth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobResult) validateBuild(formats strfmt.Registry) error {

	if swag.IsZero(m.Build) { // not required
		return nil
	}

	if m.Build != nil {
		if err := m.Build.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobResult) validateDeploy(formats strfmt.Registry) error {

	if swag.IsZero(m.Deploy) { // not required
		return nil
	}

	if m.Deploy != nil {
		if err := m.Deploy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploy")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobResult) validateDocs(formats strfmt.Registry) error {

	if swag.IsZero(m.Docs) { // not required
		return nil
	}

	if m.Docs != nil {
		if err := m.Docs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("docs")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobResult) validatePipelineConfigSync(formats strfmt.Registry) error {

	if swag.IsZero(m.PipelineConfigSync) { // not required
		return nil
	}

	if m.PipelineConfigSync != nil {
		if err := m.PipelineConfigSync.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pipeline_config_sync")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobResult) validatePipelineStep(formats strfmt.Registry) error {

	if swag.IsZero(m.PipelineStep) { // not required
		return nil
	}

	if m.PipelineStep != nil {
		if err := m.PipelineStep.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pipeline_step")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobResult) validatePoll(formats strfmt.Registry) error {

	if swag.IsZero(m.Poll) { // not required
		return nil
	}

	if m.Poll != nil {
		if err := m.Poll.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("poll")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobResult) validateProjectDestroy(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectDestroy) { // not required
		return nil
	}

	if m.ProjectDestroy != nil {
		if err := m.ProjectDestroy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project_destroy")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobResult) validatePush(formats strfmt.Registry) error {

	if swag.IsZero(m.Push) { // not required
		return nil
	}

	if m.Push != nil {
		if err := m.Push.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("push")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobResult) validateQueueProject(formats strfmt.Registry) error {

	if swag.IsZero(m.QueueProject) { // not required
		return nil
	}

	if m.QueueProject != nil {
		if err := m.QueueProject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queue_project")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobResult) validateRelease(formats strfmt.Registry) error {

	if swag.IsZero(m.Release) { // not required
		return nil
	}

	if m.Release != nil {
		if err := m.Release.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("release")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobResult) validateStartTask(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTask) { // not required
		return nil
	}

	if m.StartTask != nil {
		if err := m.StartTask.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("start_task")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobResult) validateStatusReport(formats strfmt.Registry) error {

	if swag.IsZero(m.StatusReport) { // not required
		return nil
	}

	if m.StatusReport != nil {
		if err := m.StatusReport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_report")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobResult) validateUp(formats strfmt.Registry) error {

	if swag.IsZero(m.Up) { // not required
		return nil
	}

	if m.Up != nil {
		if err := m.Up.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("up")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobResult) validateWatchTask(formats strfmt.Registry) error {

	if swag.IsZero(m.WatchTask) { // not required
		return nil
	}

	if m.WatchTask != nil {
		if err := m.WatchTask.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("watch_task")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpWaypointJobResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpWaypointJobResult) UnmarshalBinary(b []byte) error {
	var res HashicorpWaypointJobResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
