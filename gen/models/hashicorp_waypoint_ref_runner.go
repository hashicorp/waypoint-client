// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpWaypointRefRunner Runner references a runner process which executes operations. This
// can reference a runner by any of the more specific types, such as
// by ID. If you want to constrain which runners can be targeted,
// a different ref type should be used.
//
// swagger:model hashicorp.waypoint.Ref.Runner
type HashicorpWaypointRefRunner struct {

	// any
	Any HashicorpWaypointRefRunnerAny `json:"any,omitempty"`

	// id
	ID *HashicorpWaypointRefRunnerID `json:"id,omitempty"`

	// labels
	Labels *HashicorpWaypointRefRunnerLabels `json:"labels,omitempty"`
}

// Validate validates this hashicorp waypoint ref runner
func (m *HashicorpWaypointRefRunner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointRefRunner) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if m.ID != nil {
		if err := m.ID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointRefRunner) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	if m.Labels != nil {
		if err := m.Labels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labels")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpWaypointRefRunner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpWaypointRefRunner) UnmarshalBinary(b []byte) error {
	var res HashicorpWaypointRefRunner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
