// Code generated by go-swagger; DO NOT EDIT.

package waypoint_control_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new waypoint control service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for waypoint control service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {

	WaypointControlServiceGetNamespace(params *WaypointControlServiceGetNamespaceParams, authInfo runtime.ClientAuthInfoWriter) (*WaypointControlServiceGetNamespaceOK, error)

	WaypointControlServiceGetNamespaceInfo(params *WaypointControlServiceGetNamespaceInfoParams, authInfo runtime.ClientAuthInfoWriter) (*WaypointControlServiceGetNamespaceInfoOK, error)

	SetTransport(transport runtime.ClientTransport)
}
/*
  WaypointControlServiceGetNamespace gets namespace returns the namespace for the h c p organization project combo this automatically creates the namespace if it doesn t yet exist
*/
func (a *Client) WaypointControlServiceGetNamespace(params *WaypointControlServiceGetNamespaceParams, authInfo runtime.ClientAuthInfoWriter) (*WaypointControlServiceGetNamespaceOK, error) {
	// TODO: Validate2 the params before sending
	if params == nil {
		params = NewWaypointControlServiceGetNamespaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WaypointControlService_GetNamespace",
		Method:             "GET",
		PathPattern:        "/waypoint/2022-02-03/organizations/{location.organization_id}/projects/{location.project_id}/namespace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WaypointControlServiceGetNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WaypointControlServiceGetNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WaypointControlServiceGetNamespaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  WaypointControlServiceGetNamespaceInfo gets namespace info returns basic information about the namespace the user exists in
*/
func (a *Client) WaypointControlServiceGetNamespaceInfo(params *WaypointControlServiceGetNamespaceInfoParams, authInfo runtime.ClientAuthInfoWriter) (*WaypointControlServiceGetNamespaceInfoOK, error) {
	// TODO: Validate2 the params before sending
	if params == nil {
		params = NewWaypointControlServiceGetNamespaceInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "WaypointControlService_GetNamespaceInfo",
		Method:             "GET",
		PathPattern:        "/waypoint/2022-02-03/namespace/*/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WaypointControlServiceGetNamespaceInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WaypointControlServiceGetNamespaceInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WaypointControlServiceGetNamespaceInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
