// Code generated by go-swagger; DO NOT EDIT.

package waypoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewWaypointGetTriggerParams creates a new WaypointGetTriggerParams object
// with the default values initialized.
func NewWaypointGetTriggerParams() *WaypointGetTriggerParams {
	var ()
	return &WaypointGetTriggerParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewWaypointGetTriggerParamsWithTimeout creates a new WaypointGetTriggerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewWaypointGetTriggerParamsWithTimeout(timeout time.Duration) *WaypointGetTriggerParams {
	var ()
	return &WaypointGetTriggerParams{

		timeout: timeout,
	}
}

// NewWaypointGetTriggerParamsWithContext creates a new WaypointGetTriggerParams object
// with the default values initialized, and the ability to set a context for a request
func NewWaypointGetTriggerParamsWithContext(ctx context.Context) *WaypointGetTriggerParams {
	var ()
	return &WaypointGetTriggerParams{

		Context: ctx,
	}
}

// NewWaypointGetTriggerParamsWithHTTPClient creates a new WaypointGetTriggerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewWaypointGetTriggerParamsWithHTTPClient(client *http.Client) *WaypointGetTriggerParams {
	var ()
	return &WaypointGetTriggerParams{
		HTTPClient: client,
	}
}

/*WaypointGetTriggerParams contains all the parameters to send to the API endpoint
for the waypoint get trigger operation typically these are written to a http.Request
*/
type WaypointGetTriggerParams struct {

	/*RefID*/
	RefID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the waypoint get trigger params
func (o *WaypointGetTriggerParams) WithTimeout(timeout time.Duration) *WaypointGetTriggerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the waypoint get trigger params
func (o *WaypointGetTriggerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the waypoint get trigger params
func (o *WaypointGetTriggerParams) WithContext(ctx context.Context) *WaypointGetTriggerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the waypoint get trigger params
func (o *WaypointGetTriggerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the waypoint get trigger params
func (o *WaypointGetTriggerParams) WithHTTPClient(client *http.Client) *WaypointGetTriggerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the waypoint get trigger params
func (o *WaypointGetTriggerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRefID adds the refID to the waypoint get trigger params
func (o *WaypointGetTriggerParams) WithRefID(refID string) *WaypointGetTriggerParams {
	o.SetRefID(refID)
	return o
}

// SetRefID adds the refId to the waypoint get trigger params
func (o *WaypointGetTriggerParams) SetRefID(refID string) {
	o.RefID = refID
}

// WriteToRequest writes these params to a swagger request
func (o *WaypointGetTriggerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ref.id
	if err := r.SetPathParam("ref.id", o.RefID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
