// Code generated by go-swagger; DO NOT EDIT.

package waypoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewWaypointGetLatestPipelineRun2Params creates a new WaypointGetLatestPipelineRun2Params object
// with the default values initialized.
func NewWaypointGetLatestPipelineRun2Params() *WaypointGetLatestPipelineRun2Params {
	var ()
	return &WaypointGetLatestPipelineRun2Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewWaypointGetLatestPipelineRun2ParamsWithTimeout creates a new WaypointGetLatestPipelineRun2Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewWaypointGetLatestPipelineRun2ParamsWithTimeout(timeout time.Duration) *WaypointGetLatestPipelineRun2Params {
	var ()
	return &WaypointGetLatestPipelineRun2Params{

		timeout: timeout,
	}
}

// NewWaypointGetLatestPipelineRun2ParamsWithContext creates a new WaypointGetLatestPipelineRun2Params object
// with the default values initialized, and the ability to set a context for a request
func NewWaypointGetLatestPipelineRun2ParamsWithContext(ctx context.Context) *WaypointGetLatestPipelineRun2Params {
	var ()
	return &WaypointGetLatestPipelineRun2Params{

		Context: ctx,
	}
}

// NewWaypointGetLatestPipelineRun2ParamsWithHTTPClient creates a new WaypointGetLatestPipelineRun2Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewWaypointGetLatestPipelineRun2ParamsWithHTTPClient(client *http.Client) *WaypointGetLatestPipelineRun2Params {
	var ()
	return &WaypointGetLatestPipelineRun2Params{
		HTTPClient: client,
	}
}

/*WaypointGetLatestPipelineRun2Params contains all the parameters to send to the API endpoint
for the waypoint get latest pipeline run2 operation typically these are written to a http.Request
*/
type WaypointGetLatestPipelineRun2Params struct {

	/*PipelineID
	  Reference a single pipeline by ID.

	*/
	PipelineID string
	/*PipelineOwnerPipelineName
	  the name of the defined pipeline config.

	*/
	PipelineOwnerPipelineName *string
	/*PipelineOwnerProjectProject*/
	PipelineOwnerProjectProject *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the waypoint get latest pipeline run2 params
func (o *WaypointGetLatestPipelineRun2Params) WithTimeout(timeout time.Duration) *WaypointGetLatestPipelineRun2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the waypoint get latest pipeline run2 params
func (o *WaypointGetLatestPipelineRun2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the waypoint get latest pipeline run2 params
func (o *WaypointGetLatestPipelineRun2Params) WithContext(ctx context.Context) *WaypointGetLatestPipelineRun2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the waypoint get latest pipeline run2 params
func (o *WaypointGetLatestPipelineRun2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the waypoint get latest pipeline run2 params
func (o *WaypointGetLatestPipelineRun2Params) WithHTTPClient(client *http.Client) *WaypointGetLatestPipelineRun2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the waypoint get latest pipeline run2 params
func (o *WaypointGetLatestPipelineRun2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPipelineID adds the pipelineID to the waypoint get latest pipeline run2 params
func (o *WaypointGetLatestPipelineRun2Params) WithPipelineID(pipelineID string) *WaypointGetLatestPipelineRun2Params {
	o.SetPipelineID(pipelineID)
	return o
}

// SetPipelineID adds the pipelineId to the waypoint get latest pipeline run2 params
func (o *WaypointGetLatestPipelineRun2Params) SetPipelineID(pipelineID string) {
	o.PipelineID = pipelineID
}

// WithPipelineOwnerPipelineName adds the pipelineOwnerPipelineName to the waypoint get latest pipeline run2 params
func (o *WaypointGetLatestPipelineRun2Params) WithPipelineOwnerPipelineName(pipelineOwnerPipelineName *string) *WaypointGetLatestPipelineRun2Params {
	o.SetPipelineOwnerPipelineName(pipelineOwnerPipelineName)
	return o
}

// SetPipelineOwnerPipelineName adds the pipelineOwnerPipelineName to the waypoint get latest pipeline run2 params
func (o *WaypointGetLatestPipelineRun2Params) SetPipelineOwnerPipelineName(pipelineOwnerPipelineName *string) {
	o.PipelineOwnerPipelineName = pipelineOwnerPipelineName
}

// WithPipelineOwnerProjectProject adds the pipelineOwnerProjectProject to the waypoint get latest pipeline run2 params
func (o *WaypointGetLatestPipelineRun2Params) WithPipelineOwnerProjectProject(pipelineOwnerProjectProject *string) *WaypointGetLatestPipelineRun2Params {
	o.SetPipelineOwnerProjectProject(pipelineOwnerProjectProject)
	return o
}

// SetPipelineOwnerProjectProject adds the pipelineOwnerProjectProject to the waypoint get latest pipeline run2 params
func (o *WaypointGetLatestPipelineRun2Params) SetPipelineOwnerProjectProject(pipelineOwnerProjectProject *string) {
	o.PipelineOwnerProjectProject = pipelineOwnerProjectProject
}

// WriteToRequest writes these params to a swagger request
func (o *WaypointGetLatestPipelineRun2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param pipeline.id
	if err := r.SetPathParam("pipeline.id", o.PipelineID); err != nil {
		return err
	}

	if o.PipelineOwnerPipelineName != nil {

		// query param pipeline.owner.pipeline_name
		var qrPipelineOwnerPipelineName string
		if o.PipelineOwnerPipelineName != nil {
			qrPipelineOwnerPipelineName = *o.PipelineOwnerPipelineName
		}
		qPipelineOwnerPipelineName := qrPipelineOwnerPipelineName
		if qPipelineOwnerPipelineName != "" {
			if err := r.SetQueryParam("pipeline.owner.pipeline_name", qPipelineOwnerPipelineName); err != nil {
				return err
			}
		}

	}

	if o.PipelineOwnerProjectProject != nil {

		// query param pipeline.owner.project.project
		var qrPipelineOwnerProjectProject string
		if o.PipelineOwnerProjectProject != nil {
			qrPipelineOwnerProjectProject = *o.PipelineOwnerProjectProject
		}
		qPipelineOwnerProjectProject := qrPipelineOwnerProjectProject
		if qPipelineOwnerProjectProject != "" {
			if err := r.SetQueryParam("pipeline.owner.project.project", qPipelineOwnerProjectProject); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
