// Code generated by go-swagger; DO NOT EDIT.

package waypoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewWaypointGetUserParams creates a new WaypointGetUserParams object
// with the default values initialized.
func NewWaypointGetUserParams() *WaypointGetUserParams {
	var ()
	return &WaypointGetUserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewWaypointGetUserParamsWithTimeout creates a new WaypointGetUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewWaypointGetUserParamsWithTimeout(timeout time.Duration) *WaypointGetUserParams {
	var ()
	return &WaypointGetUserParams{

		timeout: timeout,
	}
}

// NewWaypointGetUserParamsWithContext creates a new WaypointGetUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewWaypointGetUserParamsWithContext(ctx context.Context) *WaypointGetUserParams {
	var ()
	return &WaypointGetUserParams{

		Context: ctx,
	}
}

// NewWaypointGetUserParamsWithHTTPClient creates a new WaypointGetUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewWaypointGetUserParamsWithHTTPClient(client *http.Client) *WaypointGetUserParams {
	var ()
	return &WaypointGetUserParams{
		HTTPClient: client,
	}
}

/*WaypointGetUserParams contains all the parameters to send to the API endpoint
for the waypoint get user operation typically these are written to a http.Request
*/
type WaypointGetUserParams struct {

	/*UserIDID*/
	UserIDID string
	/*UserUsernameUsername*/
	UserUsernameUsername *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the waypoint get user params
func (o *WaypointGetUserParams) WithTimeout(timeout time.Duration) *WaypointGetUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the waypoint get user params
func (o *WaypointGetUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the waypoint get user params
func (o *WaypointGetUserParams) WithContext(ctx context.Context) *WaypointGetUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the waypoint get user params
func (o *WaypointGetUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the waypoint get user params
func (o *WaypointGetUserParams) WithHTTPClient(client *http.Client) *WaypointGetUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the waypoint get user params
func (o *WaypointGetUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUserIDID adds the userIDID to the waypoint get user params
func (o *WaypointGetUserParams) WithUserIDID(userIDID string) *WaypointGetUserParams {
	o.SetUserIDID(userIDID)
	return o
}

// SetUserIDID adds the userIdId to the waypoint get user params
func (o *WaypointGetUserParams) SetUserIDID(userIDID string) {
	o.UserIDID = userIDID
}

// WithUserUsernameUsername adds the userUsernameUsername to the waypoint get user params
func (o *WaypointGetUserParams) WithUserUsernameUsername(userUsernameUsername *string) *WaypointGetUserParams {
	o.SetUserUsernameUsername(userUsernameUsername)
	return o
}

// SetUserUsernameUsername adds the userUsernameUsername to the waypoint get user params
func (o *WaypointGetUserParams) SetUserUsernameUsername(userUsernameUsername *string) {
	o.UserUsernameUsername = userUsernameUsername
}

// WriteToRequest writes these params to a swagger request
func (o *WaypointGetUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param user.id.id
	if err := r.SetPathParam("user.id.id", o.UserIDID); err != nil {
		return err
	}

	if o.UserUsernameUsername != nil {

		// query param user.username.username
		var qrUserUsernameUsername string
		if o.UserUsernameUsername != nil {
			qrUserUsernameUsername = *o.UserUsernameUsername
		}
		qUserUsernameUsername := qrUserUsernameUsername
		if qUserUsernameUsername != "" {
			if err := r.SetQueryParam("user.username.username", qUserUsernameUsername); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
